{"version":3,"sources":["index.js"],"names":["require","config","logger","bodyParser","cookieParser","express","cors","path","env","PORT","myApi","origin","optionsSuccessStatus","app","use","corsOptions","extended","json","en","ko","SUPPORTED_LANGUAGES","get","req","res","next","_lang","query","lang","cookies","cookie","redirect","static","process","cwd","join","__dirname","sendFile","post","sendEmail","body","replyEmail","then","catch","status","err","Error","console","error","message","listen","port"],"mappings":"aAAAA,QAAQ,UAAUC,SAClB,IAAMC,OAASF,QAAQ,UADvBA,WAAkBC,QAAlB,eACMC,aAAiBF,QAAR,iBACTG,QAAAA,QAAaH,WACbI,KAAAA,QAAeJ,QACfK,IAAAA,UACAC,KAAON,QAAQ,QAEfO,KAAOP,QAAQQ,IAARC,MAAb,KAGMC,MAAQV,QAAQ,YAAhBU,YAAgB,CAGrBC,OAAQ,2BADTC,qBAAoB,KAAAC,IAApBC,IAAAR,KAAAS,cAMAF,IAAIC,IAAIZ,OAAO,QADfW,IAAIC,IAAIR,WAAKS,WAAb,CACAF,UAAQX,KAEPc,IAAAA,IAAAA,WAAUC,QADmBJ,IAA9BC,IAAAV,gBAIAS,IAAIC,oBAAJ,CAGCI,GAAI,EADLC,GAAMC,GAAsBP,IAA5BQ,IAAA,IAAA,SAAAC,EAAAC,EAAAC,GAMCF,EAAIG,MAAQH,EAAII,MAAMC,MAAQL,EAAIM,QAAQD,KADvCN,oBAAUC,EAAKC,OAElBA,EAAIH,OAAAA,OAAAA,EAAoBE,OAEvBC,EAAIM,MAAO,KAOZL,MAXD,eAAAX,IAAAQ,IAAA,QAiBCR,IAAIQ,IAAI,IAAK,SAACC,EAAKC,GADpBA,EAAIV,SAAJ,4BAAqCS,EAAAG,MAArC,OAEEF,IAAAA,IAAIO,MAAJ,SAAAR,EAAAC,GADDA,EAAAO,SAAA,kCAICP,IAAAA,IAAIO,MAAS,SAAAR,EAAAC,GADdA,EAAAO,SAAA,oCAKCjB,IAFDC,IAAA,WAAAT,QAAA0B,OAAAC,QAAAC,MAAA,aAPDpB,IAAAC,IAUO,aAAAT,QAAA0B,OAAAxB,KAAA2B,KAAAC,UAAA,MAAA,sBACNtB,IAAIC,IAAIT,QAAA0B,OAAY1B,QAAA4B,MAAZ,YAERpB,IAAIC,IAAIT,IAAAA,SAAAA,EAAQ0B,GAGfR,EAAIa,SAAS7B,KAAK2B,KAAKC,UAAV,UAA+Bb,EAAIG,MAAnC,kBAAbF,IAAAA,IAAIa,MAAS7B,SAAU4B,EAAAA,GADxBZ,EAAAa,SAAA7B,KAAA2B,KAAAC,UAAA,2BAICZ,IAAAA,IAAIa,MAAS7B,SAAU4B,EAAAA,GADxBZ,EAAAa,SAAA7B,KAAA2B,KAAAC,UAAA,2BAICZ,IAAAA,IAAIa,cAAS,SAAAd,EAAqBC,GADnCA,EAAAa,SAAA7B,KAAA2B,KAAAC,UAAA,yBAMAtB,IAAAwB,KAAA,eAAA,SAAAf,EAAAC,GAGA,OAAOb,MAAM4B,UAAUhB,EAAIiB,MAD5B1B,KAAA,WAAA,OAASH,MAAA8B,WAAgBlB,EAACA,QACzBmB,KAAO/B,WAAAA,OAAM4B,EAAAA,OAAUhB,KAAIiB,KACzBE,aAAKC,MAAMhC,SAAAA,GACNa,EAAAoB,OAAUA,KAAJ1B,KAAA2B,OASd/B,IAAIC,IAAI,SAAU8B,EAAKtB,EAAKC,EAAKC,GAFjC,IAAAqB,MAAA,aACAD,EAAAD,OAAA,IACA9B,EAAIC,KAQmB,eAAnBD,IAAIQ,IAAI,OAAZR,IAAIA,IAAIQ,SAAAA,EAAIC,EAARC,EAAmBC,GAEtBD,EAAAoB,OAAAC,EAAAD,QAAA,KACA9B,EAAIC,KAAI,CACPgC,QAAQC,uBACRxB,MAAIoB,KAEHK,MAGDxB,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAVFD,EAAAoB,OAYOC,EAAAD,QAAA,KACN9B,EAAIC,KAAI,CACPgC,QAAQC,EAAMH,QACdrB,MAAIoB,IAEHK,MAIDnC,IARDoC,OAAAC,KAAA","file":"../index.js","sourcesContent":["require('dotenv').config();\nconst logger = require('morgan');\nconst bodyParser = require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst path = require('path');\n\nconst port = process.env.PORT || 9800;\nconst myApi = require('./api.js');\n\nconst corsOptions = {\n\torigin: 'https://jin827.github.io',\n\toptionsSuccessStatus: 200 // some legacy browsers (IE11, various SmartTVs) choke on 204\n};\n\napp.use(cors(corsOptions));\napp.use(logger('dev'));\napp.use(bodyParser.urlencoded({\n\textended: true\n}));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\nconst SUPPORTED_LANGUAGES = {\n\ten: 1,\n\tko: 1\n};\n\napp.get('/', (req, res, next) => {\n\treq._lang = req.query.lang || req.cookies.lang;\n\tif (SUPPORTED_LANGUAGES[req._lang]) {\n\t\t// Set the language in the cookie for user accessing via heroku\n\t\tres.cookie('lang', req._lang);\n\t} else {\n\t\treq._lang = 'en';\n\t}\n\n\t// if (req.query.lang) {\n\t// \treturn res.redirect('/');\n\t// }\n\n\tnext();\n});\n\nif (app.get('env') === 'production') {\n\tapp.get('/', (req, res) => {\n\t\tres.redirect(`https://jin827.github.io/${req._lang}/`);\n\t});\n\tapp.get('/en', (req, res) => {\n\t\tres.redirect('https://jin827.github.io/en/');\n\t});\n\tapp.get('/ko', (req, res) => {\n\t\tres.redirect('https://jin827.github.io/ko/');\n\t});\n} else {\n\tapp.use('/vendors', express.static(`${process.cwd()}/vendors`));\n\tapp.use('/resources', express.static(path.join(__dirname, '../', 'client/resources')));\n\tapp.use(express.static(`${process.cwd()}/static`));\n\n\tapp.get('/', (req, res) => {\n\t\tres.sendFile(path.join(__dirname, `/views/${req._lang}/index.html`));\n\t});\n\tapp.get('/ko', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/ko/index.html'));\n\t});\n\tapp.get('/en', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/en/index.html'));\n\t});\n\tapp.get('/index.html', function (req, res) {\n\t\tres.sendFile(path.join(__dirname, '/views/index.html'));\n\t});\n}\n\napp.post('/api/contact', (req, res) => {\n\treturn myApi.sendEmail(req.body)\n\t\t.then(() => myApi.replyEmail(req.body))\n\t\t.then(() => res.status(201).send('success'))\n\t\t.catch(err => {\n\t\t\tconsole.error(err);\n\t\t\tres.status(400).json(err);\n\t\t});\n});\n\n// error handlers\n// catch 404 and forward to error handler\napp.use(function (err, req, res, next) {\n\tnew Error('Not Found');\n\terr.status = 404;\n\tnext(err);\n});\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'production') {\n\t// production error handler\n\t// no stacktraces leaked to user\n\tapp.use((err, req, res, next) => {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: 'An error has occured',\n\t\t\terror: {}\n\t\t});\n\t\tnext();\n\t});\n} else {\n\tapp.use((err, req, res, next) => {\n\t\tconsole.error(err);\n\t\tres.status(err.status || 500);\n\t\tres.json({\n\t\t\tmessage: err.message,\n\t\t\terror: err\n\t\t});\n\t\tnext();\n\t});\n}\n\napp.listen(port, () => {\n\tconsole.log(`Server is up on port ${port}!`);\n});\nconsole.log(`NODE_ENV : ${process.env.NODE_ENV} mode`);\n"]}